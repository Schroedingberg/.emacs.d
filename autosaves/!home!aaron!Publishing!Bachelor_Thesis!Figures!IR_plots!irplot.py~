import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy as sp
import scipy.constants as con
import scipy.signal  as signal
from custom_data_analysis import statistical_filter
from matplotlib import rc
import os, sys
from peakmark import annotate_peaks
import re
import math
slidesfacecolor = (0.98,0.98,0.98)
rc('font',**{'family':'serif','serif':['Source Serif Pro']})
rc('text', usetex=True)
rc('legend',**{'fontsize':16})


def ir_format(ax):
    ax.set_xlim([max(x), min(x)])
    ax.set_xlabel(r"$\tilde{\nu}/\frac{1}{cm}$", fontsize =14)
    ax.set_ylabel("Absorption",fontsize =14)
def normalize_vector(X):
    modulus = math.sqrt(sum(X**2))
    return X/modulus



    
    

sns.set_style("white")
# rc('font',**{'family':'sans-serif','sans-serif':['Helvetica']})
 ## for Palatino and other serif fonts use:



samples = []
# List all files that are in the data directory
path = "/home/aaron/Publishing/Bachelor_Thesis/Data/IR/"
DIR = os.listdir(path)
# Convenience function for split
sp = lambda s : s.split(".")

for f in DIR:
    if ".dpt" in f:
        if int(sp(f)[1]) > 0:
            samples.append(sp(f)[0]+"."+sp(f)[1])
        else:
            samples.append(sp(f)[0])
        




Names = ["nu", "Absorption"]
iterables = [samples, Names]
index = pd.MultiIndex.from_product(iterables, names = ["Sample", "Parameter"])
data = pd.DataFrame(None,index = index)
raw_data_list = dict.fromkeys(samples)
for f in DIR:
    if ".dpt" in f:
        if int(sp(f)[1]) > 0:
            key = sp(f)[0]+"."+sp(f)[1]
            tempds =  pd.read_csv(path+f , header = None )
            tempdf = pd.DataFrame(tempds)

            tempdf.columns = Names
            tempdf["nu"] = tempdf["nu"][::-1]
            tempdf["Absorption"] = tempdf["Absorption"][::-1]
            raw_data_list[key] = tempdf

            
        else:
            key = sp(f)[0]
            tempds =  pd.read_csv(path+f , header = None )
            tempdf = pd.DataFrame(tempds)
            
            tempdf.columns = Names
            tempdf["nu"] = tempdf["nu"][::-1]
            tempdf["Absorption"] = tempdf["Absorption"][::-1]
            raw_data_list[key] = tempdf

            
data=pd.concat(raw_data_list,axis = 1)
sg = statistical_filter()

# Setting up the plot
fig1 = plt.figure("IR spectrum")
sp1 = fig1.add_subplot(111)
sp1.invert_xaxis()
r1 = data["Rubber 1"]

ur = data["Unirez"]

x = r1["nu"]

# Call the operations on the plot to format it according to the requirements
# Rubber 1 for now has special requirements
ir_format(sp1)
sp1.plot(r1["nu"] , r1["Absorption"], linewidth = 0.8, label = "Rubber 1" )
#annotate_peaks(sp1,r1, 1.1,1.1)
sp1.plot(ur["nu"], ur["Absorption"], linewidth = 0.8, label = "Unirez")
diff = r1["Absorption"]-ur["Absorption"]
sp1.plot(ur["nu"], diff, linewidth = 0.8, label = r"Rubber 1 - Unirez")
sp1.legend()
fig1.tight_layout()
fig1.savefig("./Output/Rubber_1_diff.eps",facecolor = slidesfacecolor )
plt.cla()

fig2 = plt.figure("IR spectrum")
spsmooth = fig2.add_subplot(111)
spsmooth.invert_xaxis()

ir_format(spsmooth)
ursmooth = sg.savitzky_golay(ur.Absorption.values, 41,4)
r1smooth = sg.savitzky_golay(r1.Absorption.values,41,4 )
diffsmooth = r1smooth-ursmooth
spsmooth.plot(x, r1smooth, linewidth = 0.8, label = "Rubber 1")
spsmooth.plot(x, ursmooth, linewidth = 0.8, label = "Unirez")                             
spsmooth.plot(x,diffsmooth, linewidth = 0.8, label  =  r"Rubber 1 - Unirez")
spsmooth.legend()
fig2.savefig("./Output/Rubber_1_diff_smooth.eps", facecolor = slidesfacecolor)
plt.clf()
ursmooth = normalize_vector(ursmooth)
r1smooth = normalize_vector(r1smooth)
diffsmooth = r1smooth-ursmooth
spsmooth.plot(x, r1smooth, linewidth = 0.8, label = "Rubber 1")
spsmooth.plot(x, ursmooth, linewidth = 0.8, label = "Unirez")                             
spsmooth.plot(x,diffsmooth, linewidth = 0.8, label  =  r"Rubber 1 - Unirez")
spsmooth.legend()
fig2.savefig("./Output/Rubber_1_diff_smooth_normalized.eps", facecolor = slidesfacecolor)
plt.clf()



fig = plt.figure()
def standardplot(name, additives = [], dynapurge = False, normalize = False, filename = None):
    sp = fig.add_subplot(111)
    sp.invert_xaxis()
    d = data[name]
    nu = d["nu"]
    y = d["Absorption"]
    
    if normalize:
        y = normalize_vector(y)
    name = re.sub(r'\.[0-9]', "", name)
    sp.plot(nu,y,linewidth=0.8,label = name)
    for elem in additives:
        d = data[elem]
        nu = d["nu"]
        y = d["Absorption"]
        if normalize:
            y = normalize_vector(y)
        sp.plot(nu,y, linewidth=0.8, label = elem)
    ir_format(sp)
    sp.legend()
    fig.tight_layout()
    #   name = re.sub(r'\.|\s', "", name)
    if filename == None:
        fig.savefig("./Output/"+name+".eps", facecolor = slidesfacecolor)
    else:
        fig.savefig("./Output/"+filename+".eps", facecolor = slidesfacecolor)
    plt.clf()
    


def multiplot(names, filename):
    sp = fig.add_subplot(111)
    sp.invert_xaxis()
    for elem in names:
        d = data[elem]
        nu = d["nu"]
        y = d["Absorption"]
        y = normalize_vector(y)
        ir_format(sp)
        name = re.sub(r'\.[0-9]', "", elem)
        sp.plot(nu,y,linewidth=0.8,label = name)
    sp.legend()
    fig.tight_layout()
#   name = re.sub(r'\.|\s', "", name)
    fig.savefig("./Output/"+filename+".eps", facecolor = slidesfacecolor)
    plt.clf()
    




def diffplot(minsub,compare, filename, normalize = False, smooth = False ):
    sp = fig.add_subplot(111)
    sp.invert_xaxis()
    x = data[minsub[0]]["nu"]
    comp = data[compare]["Absorption"]
    if not normalize:
        a = data[minsub[0]]["Absorption"]
        b = data[minsub[1]]["Absorption"]
    else:
        a = normalize_vector(data[minsub[1]]["Absorption"])
        b = normalize_vector(data[minsub[0]]["Absorption"])
        comp = normalize_vector(comp)
    diff = a-b
    if smooth:
        diff = sg.savitzky_golay(diff,41,4)
        
    sp.plot(x,diff, linewidth=0.8, label =  re.sub(r"\.[0-9]","",minsub[0]+"-"+minsub[1]))
    sp.plot(x,comp,linewidth=0.8, label = re.sub(r"\.[0-9]","",compare))
    ir_format(sp)
    sp.legend()
    fig.tight_layout()
    fig.savefig("./Output/"+filename+".eps", facecolor = slidesfacecolor)
    plt.clf()
            

standardplot("Rubber 3.5", ["Twaron powder"],normalize = True, filename="Rubber3")
standardplot("Rubber 2.1", ["Twaron powder"], normalize = True, filename = "Rubber2")
standardplot("Rubber 4", ["P18"],normalize = True, filename = "Rubber4")
standardplot("Rubber 5",normalize = True, filename="Rubber5")
standardplot("Rubber 6",normalize = True, filename="Rubber6")
standardplot("Dyna purge",normalize = True, filename="Dynapurge")


multiplot(["5303 ", "Powcarbon.2","Nano 27.1"], "Carbons")
multiplot(["Rubber 1", "P18"], "R1P18")
multiplot(["Rubber 1", "Dyna purge"], "R1DP")
multiplot(["Rubber 2.1", "Dyna purge"], "R2DP")
multiplot(["Rubber 3.5", "Dyna purge"], "R3DP")
multiplot(["Rubber 4", "Dyna purge"], "R4DP")
multiplot(["Rubber 5", "Dyna purge"], "R5DP")
multiplot(["Rubber 6", "Dyna purge"], "R6DP")

diffplot(["Rubber 1","Unirez"], "Dyna purge", "Rubber1_diff", True)
diffplot(["Rubber 2.1","Unirez"], "Dyna purge", "Rubber2_diff", True)
diffplot(["Rubber 3.5","Unirez"], "Dyna purge", "Rubber3_diff", True)
diffplot(["Rubber 4","Unirez"], "Dyna purge", "Rubber4_diff", True)
diffplot(["Rubber 5","Unirez"], "Dyna purge", "Rubber5_diff", True)
diffplot(["Rubber 6","Unirez"], "Dyna purge", "Rubber6_diff", True)
