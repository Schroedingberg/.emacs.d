#+STARTUP: indent
#+STARTUP: overview


* Load libraries and set style patterns
#+BEGIN_SRC ipython :session nmranalysis :exports results
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns
import numpy as np
import pandas as pd
import scipy as sp
import scipy.constants as con
import scipy.signal  as signal
from custom_data_analysis import statistical_filter
from matplotlib import rc
import os, sys
from peakmark import annotate_peaks
import re
import math
slidesfacecolor = (0.98,0.98,0.98)
rc('font',**{'family':'serif','serif':['Source Serif Pro']})
rc('text', usetex=True)
rc('legend',**{'fontsize':16})

def normalize_vector(X):
    modulus = math.sqrt(sum(X**2))
    return X/modulus
sns.set_style("white")
#+END_SRC

#+RESULTS:

* Load NMR data
#+BEGIN_SRC ipython :session nmranalysis  :exports results
%matplotlib inline
# List all files that are in the data directory
path = "/home/aaron/Dropbox/polyamides/data/NMR/Aaron/"
DIR = os.listdir(path)
# Convenience function for split
sp = lambda s : s.split(".")


samples = [re.sub(pattern=r".csv",repl="",string=f) for f in DIR if ".csv" in f]


Names = ["ppm", "y"]
#iterables = [samples, Names]
#index = pd.MultiIndex.from_product(iterables, names = ["Sample", "Parameter"])
#raw_data_list = dict.fromkeys(samples)
data = [pd.read_csv(path+i+".csv",delimiter=r"\t",header = None, names = Names) for i in samples]

z = zip(samples,data)
data = dict(z)


#+END_SRC

#+RESULTS:

* Define plotting functions
#+BEGIN_SRC ipython :session nmranalysis :file /tmp/image.png :exports results

def standardplot(name, additives = [], dynapurge = False, normalize = False, filename = None):
    sp = fig.add_subplot(111)
    sp.invert_xaxis()
    d = data[name]
    ppm = d["ppm"]
    y = d["y"]
    
    if normalize:
        y = normalize_vector(y)
    name = re.sub(r'\.[0-9]', "", name)
    sp.plot(ppm,y,linewidth=0.8,label = name)
    for elem in additives:
        d = data[elem]
        ppm = d["ppm"]
        y = d["y"]
        if normalize:
            y = normalize_vector(y)
        sp.plot(ppm,y, linewidth=0.8, label = elem)
    nmr_format(sp)
    sp.legend()
    fig.tight_layout()

    


def multiplot(names, filename):
    sp = fig.add_subplot(111)
    sp.invert_xaxis()
    for elem in names:
        d = data[elem]
        ppm = d["ppm"]
        y = d["y"]
        y = normalize_vector(y)
        nmr_format(sp)
        name = re.sub(r'\.[0-9]', "", elem)
        sp.plot(ppm,y,linewidth=0.8,label = name)
    sp.legend()
    fig.tight_layout()
#   name = re.sub(r'\.|\s', "", name)
    fig.savefig("./Output/"+filename+".eps", facecolor = slidesfacecolor)
    plt.clf()
    




def diffplot(minsub,compare, filename, normalize = False, smooth = False ):
    sp = fig.add_subplot(111)
    sp.invert_xaxis()
    x = data[minsub[0]]["ppm"]
    comp = data[compare]["y"]
    if not normalize:
        a = data[minsub[0]]["y"]
        b = data[minsub[1]]["y"]
    else:
        a = normalize_vector(data[minsub[1]]["y"])
        b = normalize_vector(data[minsub[0]]["y"])
        comp = normalize_vector(comp)
    diff = a-b
    if smooth:
        diff = sg.savitzky_golay(diff,41,4)
        
    sp.plot(x,diff, linewidth=0.8, label =  re.sub(r"\.[0-9]","",minsub[0]+"-"+minsub[1]))
    sp.plot(x,comp,linewidth=0.8, label = re.sub(r"\.[0-9]","",compare))
    nmr_format(sp)
    sp.legend()
    fig.tight_layout()
    fig.savefig("./Output/"+filename+".eps", facecolor = slidesfacecolor)
    plt.clf()
def nmr_format(ax, xlim):
    ax.set_xlabel("Chemical shift /ppm")
    ax.set_yticklabels([])
    ax.set_xlim(xlim)
    
    

#+END_SRC 

#+RESULTS:

* Plots
** Unirez
   
   Heterogeneous C-chain length in PA can disturb formation of Hydrogenbonds and thus disturb
   network --> More flexible
#+BEGIN_SRC ipython :session nmranalysis :file UnirezC.png :exports results
#%matplotlib inline
d = data["Unirez13C"]
x = d["ppm"]
y = d["y"]
#print(d)
fig = plt.figure(figsize=(12,10))
ax = fig.add_subplot(111)
nmr_format(ax,(200,-10))
ax.plot(x,y,linewidth=0.8,label="Unirez $^{13}C$")
plt.legend()
#+END_SRC

#+RESULTS:
[[file:UnirezC.png]]
#+BEGIN_SRC ipython :session nmranalysis :file UnirezH.png :exports results
#%matplotlib inline
d = data["Unirez1H"]
x = d["ppm"]
y = d["y"]
#print(d)
fig = plt.figure(figsize=(12,10))
ax = fig.add_subplot(111)
nmr_format(ax,(120,-120))
ax.plot(x,normalize_vector(y),linewidth=0.8,label="Unirez $^{1}H$")
plt.legend()
#+END_SRC

#+RESULTS:
[[file:UnirezH.png]]



** Dynapurge
   #+BEGIN_SRC ipython :session nmranalysis :file DynapurgeC.png :exports results 
#%matplotlib inline
d = data["Dynapurge13C"]
x = d["ppm"]
y = d["y"]


#print(d)
fig1 = plt.figure(figsize=(12,10))
ax = fig1.add_subplot(111)
nmr_format(ax,(200,-10))
ax.plot(x,y,label="Dynapurge $^{13}C$")
plt.legend()

#+END_SRC
#+RESULTS:
[[file:DynapurgeC.png]]




#+BEGIN_SRC ipython :session nmranalysis :file DynapurgeH.png :exports results
#%matplotlib inline
d = data["Dynapurge1H"]
x = d["ppm"]
y = d["y"]
#print(d)
fig = plt.figure(figsize=(12,10))
ax = fig.add_subplot(111)
nmr_format(ax,(120,-120))
ax.plot(x,y,linewidth=0.8,label="Dynapurge $^{1}H$")
plt.legend()
#+END_SRC

#+RESULTS:
[[file:DynapurgeH.png]]



** Twaron powder
   #+BEGIN_SRC ipython :session nmranalysis :file TwaronC.png :exports results 
#%matplotlib inline
d = data["Twaron13C"]
x = d["ppm"]
y = d["y"]
#print(d)
fig2 = plt.figure(figsize=(12,10))
ax = fig2.add_subplot(111)
nmr_format(ax,(200,-10))
ax.plot(x,y,linewidth=0.8,label="Twaron powder $^{13}C$")
plt.legend()
#+END_SRC

   #+RESULTS:
   [[file:TwaronC.png]]

#+BEGIN_SRC ipython :session nmranalysis :file TwaronH.png :exports results
#%matplotlib inline
d = data["Twaron1H"]
x = d["ppm"]
y = d["y"]
#print(d)
fig = plt.figure(figsize=(12,10))
ax = fig.add_subplot(111)
nmr_format(ax,(120,-120))
ax.plot(x,y,linewidth=0.8,label="Twaron powder $^{13}C$")
plt.legend()
#+END_SRC

#+RESULTS:
[[file:TwaronH.png]]

** Powcarbon
   #+BEGIN_SRC ipython :session nmranalysis :file Powcarbon.png :exports results 
#%matplotlib inline
pc  = data["Powcarbon1H"]
#print(d)
fig = plt.figure(figsize=(12,10))
ax = fig.add_subplot(111)
nmr_format(ax,(120,-120))
ax.plot(pc["ppm"],normalize_vector(pc["y"]),linewidth=0.5,label="Powcarbon $^{1}H$")
plt.legend()

#+END_SRC

   #+RESULTS:
   [[file:Powcarbon.png]]

* Overlay plots

** Carbon
   #+BEGIN_SRC ipython :session nmranalysis :file CarbonOverlay.png :exports results 
#%matplotlib inline
twaron,dynapurge,unirez  = data["Twaron13C"],data["Dynapurge13C"],data["Unirez13C"]
#print(d)
fig2 = plt.figure(figsize=(12,10))
ax = fig2.add_subplot(111)
nmr_format(ax,(200,-10))
ax.plot(twaron["ppm"],normalize_vector(twaron["y"]),linewidth=0.8, label="Twaron powder $^{13}C$")
ax.plot(dynapurge["ppm"],normalize_vector(dynapurge["y"]),linewidth=0.8, label="Dyna purge $^{13}C$")
ax.plot(unirez["ppm"],normalize_vector(unirez["y"]),linewidth=0.8,label="Unirez $^{13}C$")
plt.legend()

#+END_SRC

   #+RESULTS:
   [[file:CarbonOverlay.png]]

** Proton

*** Without Powcarbon
   #+BEGIN_SRC ipython :session nmranalysis :file Hoverlay.png :exports results 
#%matplotlib inline
twaron,dynapurge,unirez  = data["Twaron1H"],data["Dynapurge1H"],data["Unirez1H"]
#print(d)
fig2 = plt.figure(figsize=(12,10))
ax = fig2.add_subplot(111)
nmr_format(ax,(120,-120))
ax.plot(twaron["ppm"],normalize_vector(twaron["y"]),linewidth=0.8,label="Twaron powder $^{1}H$")
ax.plot(dynapurge["ppm"],normalize_vector(dynapurge["y"]),linewidth=0.8, label= "Dyna purge $^{1}H$")
ax.plot(unirez["ppm"],normalize_vector(unirez["y"]),linewidth=0.8,label="Unirez $^{1}H$")
plt.legend()

#+END_SRC

   #+RESULTS:
   [[file:Hoverlay.png]]

*** With Powcarbon
       #+BEGIN_SRC ipython :session nmranalysis :file POWCarbonHoverlay.png :exports results 
#%matplotlib inline
twaron,dynapurge,unirez,powcarbon  = data["Twaron1H"],data["Dynapurge1H"],data["Unirez1H"],data["Powcarbon1H"]
#print(d)
fig2 = plt.figure(figsize=(12,10))
ax = fig2.add_subplot(111)
nmr_format(ax,(120,-120))
ax.plot(twaron["ppm"],normalize_vector(twaron["y"]),linewidth=0.8,label="Twaron powder $^{1}H$")
ax.plot(dynapurge["ppm"],normalize_vector(dynapurge["y"]),linewidth=0.8, label= "Dyna purge $^{1}H$")
ax.plot(unirez["ppm"],normalize_vector(unirez["y"]),linewidth=0.8,label="Unirez $^{1}H$")
ax.plot(powcarbon["ppm"],normalize_vector(powcarbon["y"]),linewidth=0.8,label="Powcarbon $^{1}H$")
plt.legend()
#+END_SRC

       #+RESULTS:
       [[file:POWCarbonHoverlay.png]]

