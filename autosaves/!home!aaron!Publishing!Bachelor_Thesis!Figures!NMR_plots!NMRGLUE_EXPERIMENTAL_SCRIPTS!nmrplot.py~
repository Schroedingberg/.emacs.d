import nmrglue as ng
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
import seaborn as sns
import os,sys,glob
sns.set_style("white")
slidesfacecolor = (0.98,0.98,0.98)
rc('font',**{'family':'serif','serif':['Source Serif Pro']})
rc('text', usetex=True)
rc('legend',**{'fontsize':16})
#path = "/home/aaron/Publishing/Bachelor_Thesis/Data/NMR/"
path = "/home/aaron/Publishing/Bachelor_Thesis/Data/NMR/DPX200/"
fig = plt.figure()


def nmr_format(ax, xlim):
    ax.set_xlabel("Chemical shift /ppm")
    ax.set_yticklabels([])
    ax.set_xlim(xlim)
def Bruker2Pipe(sample_name,measurement = "1"):

    if sample_name[-1:] != "/":
        sample_name +="/"
    
    dic, data = ng.bruker.read(path+sample_name+str(measurement))
    data = ng.bruker.remove_digital_filter(dic,data)
    # Set the spectral parameters.
    udic = ng.bruker.guess_udic(dic, data)
    # create the converter object and initilize with Bruker data
    C = ng.convert.converter()
    C.from_bruker(dic, data, udic)
    output_pipe = "/home/aaron/Publishing/Bachelor_Thesis/Figures/NMR_plots/NMR_Pipe"
    ng.pipe.write(output_pipe+sample_name+str(measurement), *C.to_pipe(), overwrite=True)
    dic, data = ng.pipe.read(output_pipe+sample_name+measurement)
    # Make a unit conversion to plot with ppm scale
    return  data,ng.pipe.make_uc(dic,data,dim=0)

def default_processing(sample_name, measurement,interactive_phasing = False):
    
    data, uc  = Bruker2Pipe(sample_name,measurement)
    # Process the data
    data = ng.proc_base.rev(data)
    data = ng.proc_base.fft(data)
#    data = ng.proc_base.ps(data,0,0)
    data = ng.proc_base.di(data)
    if interactive_phasing:
        import interactive_phasing as intp
        import time
        D = intp.DynamicUpdate(uc.ppm_scale())
        D.on_launch()
        xdata = uc.ppm_scale()
        ydata = data
        p0 = np.arange(-50,50,10)
        p1 = np.arange(-50,50,10)
        for zero in p0:
            ydata = ng.proc_base.ps(ydata,p0= zero,p1 = zero)
            D.on_running(xdata,ydata)
            time.sleep(1)
    return data,uc
def default_nmrplot(sample_name, measurement,interactive_phasing = False):
    data, uc = default_processing(sample_name,measurement, interactive_phasing)
    ax = fig.add_subplot(111)
    ax.invert_xaxis()
    spec = ax.plot(uc.ppm_scale(),data, linewidth = 0.8)
    nmr_format(ax,[min(uc.ppm_scale()),max(uc.ppm_scale())])
    





    
def give_file(sample_name, measurements, interactive_phasing = False):
    for elem in measurements:
        default_nmrplot(sample_name, str(elem) )
        #    fig.savefig("./Output/"+sample_name+".eps", facecolor = slidesfacecolor)
        #   plt.cla()
    plt.show()


give_file("", [1], True)
