import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
import scipy as sp
import scipy.constants as con
import scipy.signal  as signal
#from custom_data_analysis import statistical_filter
from matplotlib import rc
import os, sys
#from peakmark import annotate_peaks
import re
import math

slidesfacecolor = (0.98,0.98,0.98)
rc('font',**{'family':'serif','serif':['Source Serif Pro']})
rc('text', usetex=True)
rc('legend',**{'fontsize':16})
font = { 'size'   : 16}
#matplotlib.rcParams.update({'font.size': 22})



def normalize_vector(X):
    modulus = math.sqrt(sum(X**2))
    return X/modulus
sns.set_style("white")

# List all files that are in the data directory
path = "/home/aaron/Dropbox/polyamides/data/NMR/Aaron/"
DIR = os.listdir(path)
# Convenience function for split
sp = lambda s : s.split(".")


samples = [re.sub(pattern=r".csv",repl="",string=f) for f in DIR if ".csv" in f]


Names = ["ppm", "y"]
#iterables = [samples, Names]
#index = pd.MultiIndex.from_product(iterables, names = ["Sample", "Parameter"])
#raw_data_list = dict.fromkeys(samples)
data = [pd.read_csv(path+i+".csv",delimiter=r"\t",header = None, names = Names) for i in samples]

z = zip(samples,data)
data = dict(z)


def standardplot(name, additives = [], dynapurge = False, normalize = False, filename = None):
    sp = fig.add_subplot(111)
    sp.invert_xaxis()
    d = data[name]
    ppm = d["ppm"]
    y = d["y"]
    
    if normalize:
        y = normalize_vector(y)
    name = re.sub(r'\.[0-9]', "", name)
    sp.plot(ppm,y,linewidth=0.8,label = name)
    for elem in additives:
        d = data[elem]
        ppm = d["ppm"]
        y = d["y"]
        if normalize:
            y = normalize_vector(y)
        sp.plot(ppm,y, linewidth=0.8, label = elem)
    nmr_format(sp)
    sp.legend()
    fig.tight_layout()

    


def multiplot(names, filename):
    sp = fig.add_subplot(111)
    sp.invert_xaxis()
    for elem in names:
        d = data[elem]
        ppm = d["ppm"]
        y = d["y"]
        y = normalize_vector(y)
        nmr_format(sp)
        name = re.sub(r'\.[0-9]', "", elem)
        sp.plot(ppm,y,linewidth=0.8,label = name)
    sp.legend()
    fig.tight_layout()
#   name = re.sub(r'\.|\s', "", name)
    fig.savefig("./Output/"+filename+".eps", facecolor = slidesfacecolor)
    plt.clf()
    




def diffplot(minsub,compare, filename, normalize = False, smooth = False ):
    sp = fig.add_subplot(111)
    sp.invert_xaxis()
    x = data[minsub[0]]["ppm"]
    comp = data[compare]["y"]
    if not normalize:
        a = data[minsub[0]]["y"]
        b = data[minsub[1]]["y"]
    else:
        a = normalize_vector(data[minsub[1]]["y"])
        b = normalize_vector(data[minsub[0]]["y"])
        comp = normalize_vector(comp)
    diff = a-b
    if smooth:
        diff = sg.savitzky_golay(diff,41,4)
        
    sp.plot(x,diff, linewidth=0.8, label =  re.sub(r"\.[0-9]","",minsub[0]+"-"+minsub[1]))
    sp.plot(x,comp,linewidth=0.8, label = re.sub(r"\.[0-9]","",compare))
    nmr_format(sp)
    sp.legend()
    fig.tight_layout()
    fig.savefig("./Output/"+filename+".eps", facecolor = slidesfacecolor)
    plt.clf()
def nmr_format(ax, xlim):
    ax.set_xlabel("Chemical shift /ppm",fontdict={'size':22})
    ax.set_yticklabels([])
    ax.set_xlim(xlim)
    
def nmr_plot(sample_names):
    fig = plt.figure()
    ax = fig.add_subplot(111)
    isot = {"H":r"$^1H$",
            "C":r"$^{13}C$"
        }
    lim = {"H": (40,-40),
           "C": (200,-10)
    }
    for elem in sample_names:
        d = data[elem]
        lab = re.split(r'[0-9]{1,2}',elem)
        ax.plot(d["ppm"],normalize_vector(d["y"]),linewidth=0.8,label=lab[0]+" "+isot[lab[1]])
        nmr_format(ax,lim[lab[1]])
    plt.legend()
    if len(sample_names)>1:
        fig.savefig("./Output/"+"".join(sample_names[0:])+"Overlay.png",facecolor=slidesfacecolor)
        plt.clf()
    else:
        fig.savefig("./Output/"+sample_names[0]+".png",facecolor=slidesfacecolor)
    plt.clf()


present = [["Unirez13C"],
           ["Dynapurge13C"],
           ["Twaron13C"],
           ["Powcarbon1H"],
           ["Unirez1H"],
           ["Dynapurge1H"],
           ["Twaron1H"],
           ["Unirez1H","Twaron1H","Powcarbon1H"],
           ["Unirez13C","Twaron13C"],
           ["Unirez1H","Dynapurge1H"],
           ["Unirez13C","Dynapurge13C"],
           ["Unirez1H","Twaron1H"],
           ["Unirez1H","Powcarbon1H"],
#           ["Powcarbon13C"]
#           ["Unirez1H"]
]    

for elem in present:
    nmr_plot(elem)

