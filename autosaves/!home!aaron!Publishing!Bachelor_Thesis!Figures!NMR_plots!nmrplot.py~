import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy as sp
import scipy.constants as con
import scipy.signal  as signal
from custom_data_analysis import statistical_filter
from matplotlib import rc
import os, sys
from peakmark import annotate_peaks
import re
import math
slidesfacecolor = (0.98,0.98,0.98)
rc('font',**{'family':'serif','serif':['Source Serif Pro']})
rc('text', usetex=True)
rc('legend',**{'fontsize':16})


def nmr_format(ax):
    ax.set_xlim([max(x), min(x)])
    ax.set_xlabel(r"$\tilde{\nu}/\frac{1}{cm}$", fontsize =14)
    ax.set_ylabel("Absorption",fontsize =14)
def normalize_vector(X):
    modulus = math.sqrt(sum(X**2))
    return X/modulus



    
    

sns.set_style("white")
#plt.style.use("ggplot")
# rc('font',**{'family':'sans-serif','sans-serif':['Helvetica']})
 ## for Palatino and other serif fonts use:




# List all files that are in the data directory
path = "/home/aaron/Dropbox/polyamides/data/NMR/Aaron/"
DIR = os.listdir(path)
# Convenience function for split
sp = lambda s : s.split(".")


samples = [re.sub(pattern=r".csv",repl="",string=f) for f in DIR if ".csv" in f]


Names = ["ppm", "y"]
iterables = [samples, Names]
index = pd.MultiIndex.from_product(iterables, names = ["Sample", "Parameter"])
raw_data_list = dict.fromkeys(samples)

data = [pd.read_csv(path+i+".csv",delimiter=r"\t") for i in samples]
def standardplot(name, additives = [], dynapurge = False, normalize = False, filename = None):
    sp = fig.add_subplot(111)
    sp.invert_xaxis()
    d = data[name]
    ppm = d["ppm"]
    y = d["y"]
    
    if normalize:
        y = normalize_vector(y)
    name = re.sub(r'\.[0-9]', "", name)
    sp.plot(ppm,y,linewidth=0.8,label = name)
    for elem in additives:
        d = data[elem]
        ppm = d["ppm"]
        y = d["y"]
        if normalize:
            y = normalize_vector(y)
        sp.plot(ppm,y, linewidth=0.8, label = elem)
    nmr_format(sp)
    sp.legend()
    fig.tight_layout()
    #   name = re.sub(r'\.|\s', "", name)
    if filename == None:
        fig.savefig("./Output/"+name+".eps", facecolor = slidesfacecolor)
    else:
        fig.savefig("./Output/"+filename+".eps", facecolor = slidesfacecolor)
    plt.clf()
    


def multiplot(names, filename):
    sp = fig.add_subplot(111)
    sp.invert_xaxis()
    for elem in names:
        d = data[elem]
        ppm = d["ppm"]
        y = d["y"]
        y = normalize_vector(y)
        nmr_format(sp)
        name = re.sub(r'\.[0-9]', "", elem)
        sp.plot(ppm,y,linewidth=0.8,label = name)
    sp.legend()
    fig.tight_layout()
#   name = re.sub(r'\.|\s', "", name)
    fig.savefig("./Output/"+filename+".eps", facecolor = slidesfacecolor)
    plt.clf()
    




def diffplot(minsub,compare, filename, normalize = False, smooth = False ):
    sp = fig.add_subplot(111)
    sp.invert_xaxis()
    x = data[minsub[0]]["ppm"]
    comp = data[compare]["y"]
    if not normalize:
        a = data[minsub[0]]["y"]
        b = data[minsub[1]]["y"]
    else:
        a = normalize_vector(data[minsub[1]]["y"])
        b = normalize_vector(data[minsub[0]]["y"])
        comp = normalize_vector(comp)
    diff = a-b
    if smooth:
        diff = sg.savitzky_golay(diff,41,4)
        
    sp.plot(x,diff, linewidth=0.8, label =  re.sub(r"\.[0-9]","",minsub[0]+"-"+minsub[1]))
    sp.plot(x,comp,linewidth=0.8, label = re.sub(r"\.[0-9]","",compare))
    nmr_format(sp)
    sp.legend()
    fig.tight_layout()
    fig.savefig("./Output/"+filename+".eps", facecolor = slidesfacecolor)
    plt.clf()
            

