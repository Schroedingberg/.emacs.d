* Cask
#+BEGIN_SRC emacs-lisp :tangle yes
(require 'cask "~/.cask/cask.el")
(cask-initialize)
(pallet-mode t)
#+END_SRC

#+RESULTS:
: t

* Migrate uncategorized or custom set preferences 
  :LOGBOOK:
  CLOCK: [2016-03-24 Thu 20:41]--[2016-03-24 Thu 20:41] =>  0:00
  CLOCK: [2016-03-24 Thu 20:17]--[2016-03-24 Thu 20:29] =>  0:12
  CLOCK: [2016-03-24 Thu 20:10]--[2016-03-24 Thu 20:17] =>  0:07
  CLOCK: [2016-03-24 Thu 20:03]--[2016-03-24 Thu 20:08] =>  0:05
  CLOCK: [2016-03-18 Fri 11:00]--[2016-03-18 Fri 11:02] =>  0:02
  :END:

  

  #+begin_src emacs-lisp :tangle yes
  ;; Code ;; 
  (custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-parse-self t t)
; '(TeX-view-program-list (quote (("pdf-tools" ("pdf-tools") ""))))
 '(achievements-mode t)
 '(achievements-display-when-earned t)
 '(bibtex-dialect (quote biblatex))
 '(csv-separators (quote ("," ";")))
 '(custom-safe-themes
   (quote
    ("a985799595034bd95cd74ed968d15f93a1145ed81ffcf0537401ec7dd6ebed4f" "cc60d17db31a53adf93ec6fad5a9cfff6e177664994a52346f81f62840fe8e23" "e0e1a92c23f643b5885e5c67815a9fdef2b9c14097cc02fc94b024880bc37684" "357d5abe6f693f2875bb3113f5c031b7031f21717e8078f90d9d9bc3a14bcbd8" "04dd0236a367865e591927a3810f178e8d33c372ad5bfef48b5ce90d4b476481" "5e3fc08bcadce4c6785fc49be686a4a82a356db569f55d411258984e952f194a" "a0feb1322de9e26a4d209d1cfa236deaf64662bb604fa513cca6a057ddf0ef64" "7153b82e50b6f7452b4519097f880d968a6eaf6f6ef38cc45a144958e553fbc6" "7356632cebc6a11a87bc5fcffaa49bae528026a78637acd03cae57c091afd9b9" "4c028a90479b9ad4cbb26ae7dc306dded07718749fe7e4159621a8aebac40213" "38d25871e95642ee1a13013bdb988e8c8fcb4ced3832d3e927c7296a0cdf5f59" "2bed8550c6f0a5ce635373176d5f0e079fb4fb5919005bfa743c71b5eed29d81" "7997e0765add4bfcdecb5ac3ee7f64bbb03018fb1ac5597c64ccca8c88b1262f" default)))
 '(diary-entry-marker (quote font-lock-variable-name-face))
 '(doc-view-continuous t)
 '(electric-pair-mode nil)
 '(elpy-rpc-python-command "python")
 '(emms-mode-line-icon-image-cache
   (quote n
	  (image :type xpm :ascent center :data "/* XPM */
static char *note[] = {
/* width height num_colors chars_per_pixel */
\"    10   11        2            1\",
/* colors */
\". c #358d8d\",
\"# c None s None\",
/* pixels */
\"###...####\",
\"###.#...##\",
\"###.###...\",
\"###.#####.\",
\"###.#####.\",
\"#...#####.\",
\"....#####.\",
\"#..######.\",
\"#######...\",
\"######....\",
\"#######..#\" };")))
 '(gnus-logo-colors (quote ("#0d7b72" "#adadad")) t)
 '(gnus-mode-line-image-cache
   (quote
    (image :type xpm :ascent center :data "/* XPM */
static char *gnus-pointer[] = {
/* width height num_colors chars_per_pixel */
\"    18    13        2            1\",
/* colors */
\". c #358d8d\",
\"# c None s None\",
/* pixels */
\"##################\",
\"######..##..######\",
\"#####........#####\",
\"#.##.##..##...####\",
\"#...####.###...##.\",
\"#..###.######.....\",
\"#####.########...#\",
\"###########.######\",
\"####.###.#..######\",
\"######..###.######\",
\"###....####.######\",
\"###..######.######\",
\"###########.######\" };")) t)
 '(inhibit-default-init nil)
 '(inhibit-startup-screen t)
 '(menu-bar-mode nil)
 '(mu4e-completing-read-function (quote completing-read))
 '(mu4e-view-prefer-html t)
 '(org-agenda-files
   (quote
    ("~/Dropbox/.org/Food.org"
 "~/Dropbox/.org/Organizer.org"
 "~/Dropbox/.org/from-mobile.org"
 "~/Dropbox/.org/Birthdays.org"
 "~/Books/edu.org"
 "~/Development/dev.org"
 "~/Development/Github/eldiet/README.org")))
 '(org-clock-idle-time 10)
 '(org-clock-persist t)
 '(org-modules
   (quote
    (org-bbdb org-bibtex org-docview org-gnus org-habit org-info org-irc org-mhe org-rmail org-w3m)))
 '(org-directory "~")
 '(org-latex-packages-alist (quote (("" "tabu" t))))
 '(org-mobile-inbox-for-pull "~/Dropbox/.org/from-mobile.org")
 '(org-outline-path-complete-in-steps nil)
 '(org-table-convert-region-max-lines 99999)
 '(pdf-latex-command "xetex")
 '(projectile-completion-system (quote helm))
 '(projectile-global-mode t)
 '(show-paren-mode t)
 '(tool-bar-mode nil)
 '(vc-handled-backends (quote (RCS CVS SVN SCCS Bzr Hg Mtn Arch)))
)



(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
;'(auto-dim-other-buffers-face ((t (:background "black")))))
;'(auto-dim-other-buffers-face ((t (:background "#Dcdcdc")))))
'(auto-dim-other-buffers-face ((t (:background "#00000f")))))
(add-to-list 'custom-theme-load-path "/home/aaron/.emacs.d/themes")
(add-to-list 'load-path "~/.emacs.d/lisp/" )
(add-to-list 'custom-theme-load-path "home/aaron/.emacs.d/elpa")



  #+end_src

  #+RESULTS:
  | /home/aaron/.emacs.d/ | ~/.emacs.d/lisp/moe-theme.el/ | /home/aaron/.emacs.d/elpa/abyss-theme-20160420.512/ | /home/aaron/.emacs.d/elpa/afternoon-theme-20140104.1059/ | /home/aaron/.emacs.d/elpa/ahungry-theme-20160516.2058/ | /home/aaron/.emacs.d/elpa/alect-themes-20160414.114/ | /home/aaron/.emacs.d/elpa/anti-zenburn-theme-20160501.1650/ | /home/aaron/.emacs.d/elpa/apropospriate-theme-20160615.810/ | /home/aaron/.emacs.d/elpa/arjen-grey-theme-20160403.1215/ | /home/aaron/.emacs.d/elpa/atom-dark-theme-20151119.2335/ | /home/aaron/.emacs.d/elpa/basic-theme-20151010.107/ | /home/aaron/.emacs.d/elpa/cherry-blossom-theme-20150621.2042/ | /home/aaron/.emacs.d/elpa/colorsarenice-theme-20150421.1336/ | /home/aaron/.emacs.d/elpa/dark-mint-theme-20160301.2242/ | /home/aaron/.emacs.d/elpa/darkburn-theme-20151003.100/ | /home/aaron/.emacs.d/elpa/darkokai-theme-20160512.816/ | /home/aaron/.emacs.d/elpa/espresso-theme-20130228.2348/ | /home/aaron/.emacs.d/elpa/forest-blue-theme-20160627.142/ | /home/aaron/.emacs.d/elpa/hc-zenburn-theme-20150928.933/ | /home/aaron/.emacs.d/elpa/molokai-theme-20151016.845/ | /home/aaron/.emacs.d/elpa/monokai-theme-20160628.351/ | /home/aaron/.emacs.d/elpa/omtose-phellack-theme-20160412.428/ | /home/aaron/.emacs.d/elpa/smart-mode-line-powerline-theme-20160520.854/ | /home/aaron/.emacs.d/elpa/smart-mode-line-20160618.1512/ | /home/aaron/.emacs.d/elpa/ubuntu-theme-20150805.806/ | /home/aaron/.emacs.d/elpa/zenburn-theme-20160501.749/ | home/aaron/.emacs.d/elpa | /home/aaron/.emacs.d/themes | custom-theme-directory | t |
  |                       |                               |                                                     |                                                          |                                                        |                                                      |                                                             |                                                             |                                                           |                                                          |                                                     |                                                               |                                                              |                                                          |                                                        |                                                        |                                                         |                                                           |                                                          |                                                       |                                                       |                                                               |                                                                         |                                                          |                                                      |                                                       |                          |                             |                        |   |
* Sane defaults
  #+begin_src emacs-lisp :tangle yes
      (setq auto-revert-interval 1            ; Refresh buffers fast
          custom-file (make-temp-file "")   ; Discard customization's
          default-input-method "TeX"        ; Use TeX when toggling input method
          echo-keystrokes 0.1               ; Show keystrokes asap
          inhibit-startup-message t         ; No splash screen please
          initial-scratch-message nil       ; Clean scratch buffer
          recentf-max-saved-items 100       ; Show more recent files
          ring-bell-function 'ignore        ; Quiet
          ;      sentence-end-double-space nil
    )    ; No double space

    (put 'narrow-to-region 'disabled nil)

      (setq-default fill-column 79                    ; Maximum line width
                  ;              split-width-threshold 100         ; Split verticly by default
            ) ; Auto-fill-mode everywhere

    (add-hook 'after-init-hook 'smooth-scrolling-mode) 

  #+end_src

  #+RESULTS:
  : t




* Package management
  Settings for emacs package management
  #+begin_src emacs-lisp :tangle yes
  ;; ;; Package management
  (require 'package)

  (add-to-list 'package-archives
  '("melpa" . "http://melpa.org/packages/"))


  (package-initialize)


  #+end_src

  #+RESULTS:

* Org-mode
#+begin_src emacs-lisp :tangle yes
;; ;; Custom Org-settings
;; ;(require 'org-ac)
(add-hook 'org-mode-hook 'org-bullets-mode)
(setq org-mobile-directory "~/Dropbox/.org/MobileOrg")
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation t)
(setq org-enforce-todo-dependencies t)
(setq org-enforce-todo-checkbox-dependencies t)
(add-hook 'org-mode-hook 'org-hide-block-all)
;; (setq org-beamer-mode t)
(global-set-key [XF86Launch1] 'helm-list-elisp-packages)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-xg" 'magit-status)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cq" 'org-dashboard-display)
(global-set-key (kbd "C-c !") 'org-time-stamp-inactive)
					;(global-set-key "\C-c\C-x\C-a" 'org-ar
(setq org-hide-leading-stars 'hidestars)
(setq org-fontify-whole-heading-line t)
;; (setq org-log-done t)
(setq org-return-follows-link t)
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
;;Org Refiling settings
					; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
				 (org-agenda-files :maxlevel . 9))))
(setq org-completion-use-ido nil)
(setq org-refile-use-outline-path (quote file))
					;(setq org-outline-path-complete-in-steps t)


;; Org Agenda settings
;; Give my window view back to me when I am finished with agenda stuff
(setq org-agenda-restore-windows-after-quit t)
;; ;; Tasks mit Datum in der Agenda ausblenden, wenn sie bereits erledigt sind:
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-timestamp-if-deadline-is-shown t)
(setq org-agenda-skip-timestamp-if-done t)
(setq org-deadline-warning-days 14)

;; Aktuelle Zeile in der Agenda hervorheben
(add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1 )))
()
(setq org-agenda-include-diary t)

;; Latex Export Settings
;;Babel
(org-babel-do-load-languages
 'org-babel-load-languages
 (quote
  ((emacs-lisp . t)
   (ditaa . t)
   (python . t)
   (latex . t)
   (ipython .t)
   (sh . t)
   (ledger . t)
   (dot . t))))

(require 'ob-ipython)
(setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block
       ;;; display/update images in the buffer after I evaluate
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
;;Time settings
(setq org-clock-persist 'history)
;; Mobile org settings
;; (add-hook 
;;   'after-save-hook 
;;   (lambda () 
;;      (if (string= buffer-file-name "~/Dropbox/.org/Organizer.org") 
;; 	 (org-mobile-push)
;;        (org-mobile-pull)
;;      )
;;   ))
;; mail integration
;;store link to message if in header view, not to header query
(setq org-mu4e-link-query-in-headers-mode nil)
  #+end_src

  #+RESULTS:
  
** Keywords for todo function
#+begin_src emacs-lisp :tangle yes
  ;;Org TODO settings
  (setq org-todo-keywords
  '((sequence "TODO(t)" "|" "DONE(d)")
  (sequence "STARTED(s)" "WAITING(w)" "|" "DELEGATED(g)")
  (sequence "APPT(a)" "|" "ATTENDED(1)")
  (sequence "BUG(b@)" "TESTING(i)""|" "FIXED(f)")
  (sequence "|" "CANCELED(c)")  ))
  ;; ;; Farben anpassen
(setq org-todo-keyword-faces
      '(("STARTED"  . (:foreground "#b70101" :weight bold))
	("APPT"  . (:foreground "blue" :weight bold))
 	("BUG" . (:foreground "brown" :weight bold))
 	("TESTING" . (:foreground "purple" :weight bold))
	("WAITING"  . (:foreground "orange" :weight bold))
	("DELEGATED"  . (:foreground "forestgreen" :weight bold))
	("CANCELED"  . shadow)

	))
;; ;; Capture settings
 (setq org-default-notes-file "~/Dropbox/.org/Organizer.org")
;;  ;;Org Capture templates
(setq org-capture-templates
       '(
	 ("i" "Information" entry (file+headline  "~/Dropbox/.org/Organizer.org" "Captured information")
	  "* %?\n Entered on %U\n %i")
	 ("t" "Todo" entry (file+headline "~/Dropbox/.org/Organizer.org" "Tasks")
             "* TODO %?\n Entered on %U\n  %i")
        ("j" "Journal" entry (file+datetree "~/Dropbox/.org/Journal.org")
	 "* %?\nEntered on %U\n  %i\n")
	("c" "Configure" entry (file+headline "~/Dropbox/.org/Organizer.org" "Configure")
	 )
	("b" "Birthday" entry (file+headline "~/Dropbox/.org/Birthdays.org" "New Birthdays")
	 "* APPT %?\n %i\n")
	("l" "Labbook" entry (file+datetree "~/Dropbox/polyamides/Bachelor_Thesis_Aaron/Labbook.org")
	 "* %?\nEntered on %U\n  %i\n  %a \n
,#+BEGIN_SRC latex
\\newpage
,#+END_SRC

")))
		 

#+end_src




  #+RESULTS:
  | i | Information | entry | (file+headline ~/Dropbox/.org/Organizer.org Captured information) | * %? |

#+RESULTS:
: org-latex-format-headline-colored-keywords-function

** Always update cookies of headlines
   #+BEGIN_SRC emacs-lisp :tangle yes
(defun myorg-update-parent-cookie ()
  (when (equal major-mode 'org-mode)
    (save-excursion
      (ignore-errors
        (org-back-to-heading)
        (org-update-parent-todo-statistics)))))

(defadvice org-kill-line (after fix-cookies activate)
  (myorg-update-parent-cookie))

(defadvice kill-whole-line (after fix-cookies activate)
  (myorg-update-parent-cookie))


   #+END_SRC

   #+RESULTS:
   : kill-whole-line
 
** Export settings

** Org-ref
   #+BEGIN_SRC emacs-lisp :tangle yes
(require 'org-ref)
(setq reftex-default-bibliography '("~/Dropbox/polyamides/Bachelor_Thesis_Aaron/Thesis/UWS.bib"))
;; see org-ref for use of these variables
(setq org-ref-bibliography-notes '("~/Dropbox/polyamides/Bachelor_Thesis_Aaron/Thesis.org")
      org-ref-default-bibliography '("~/Dropbox/polyamides/Bachelor_Thesis_Aaron/Thesis/UWS.bib")
      org-ref-pdf-directory '("~/Dropbox/polyamides/Literature"))
   #+END_SRC

   #+RESULTS:
   | ~/Dropbox/polyamides/Literature |

*** Latex PDF export engine
    Here I set the Latex compiler for the direct PDF export to xelatex.
    I use this, because it support the beamer theme I always use (https://github.com/matze/mtheme) and offers more possibilities.
    I might write a function that lets you select interactively one day.
    ox-latex.el contains already a list of different compilation sequences that are nicely tagged, so this should be pretty easy.
    - [ ] Modify the latex packages that are loaded (especially inputenc)
    #+BEGIN_SRC emacs-lisp :tangle yes 
(setq org-latex-pdf-process
   (quote
    ("xelatex -interaction nonstopmode -output-directory %o %f"
     "biber %b" "xelatex -interaction nonstopmode -output-directory %o %f"
     "xelatex -interaction nonstopmode -output-directory %o %f")))
    #+END_SRC

    #+RESULTS:
    | xelatex -interaction nonstopmode -output-directory %o %f | biber %b | xelatex -interaction nonstopmode -output-directory %o %f | xelatex -interaction nonstopmode -output-directory %o %f |

*** Labbook class
#+begin_src emacs-lisp :tangle yes
(require 'ox-latex)


(add-to-list 'org-latex-classes
             '("Labbook"
               "\\documentclass[hyperref]{labbook}"
	       ("\\part{%s} . \\part{%s}")
	      ("\\labday{%s} . \\labday{%s}")
	      ("\\experiment{%s} . \\experiment{%s}") 
	      (" \\subexperiment{%s} . \\subexperiment{%s}")
	      ("\\section{%s} . \\section{%s}")
	      ("\\subsection{%s} . \\subsection{%s}")
	      ("\\paragraph{%s} . \\paragraph{%s}")
	      ("\\subparagraph{%s} . \\subparagraph{%s}")
	      )
	     )
#+end_src

#+RESULTS:
| beamer  | \documentclass[presentation]{beamer} | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |                                            |                                            |                                     |                                   |                                         |
| Labbook | \documentclass[hyperref]{labbook}    | (\part{%s} . \part{%s})        | (\labday{%s} . \labday{%s})          | (\experiment{%s} . \experiment{%s})        | ( \subexperiment{%s} . \subexperiment{%s}) | (\section{%s} . \section{%s})              | (\subsection{%s} . \subsection{%s}) | (\paragraph{%s} . \paragraph{%s}) | (\subparagraph{%s} . \subparagraph{%s}) |
| article | \documentclass[11pt]{article}        | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) | (\paragraph{%s} . \paragraph*{%s})         | (\subparagraph{%s} . \subparagraph*{%s})   |                                     |                                   |                                         |
| report  | \documentclass[11pt]{report}         | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s})       | (\subsubsection{%s} . \subsubsection*{%s}) |                                     |                                   |                                         |
| book    | \documentclass[11pt]{book}           | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s})       | (\subsubsection{%s} . \subsubsection*{%s}) |                                     |                                   |                                         |

*** Standard Beamer XeTex
    #+BEGIN_SRC emacs-lisp :tangle yes
;; (add-to-list 'org-export-latex-classes '("Slideshow"
;; "\\documentclass[hyperref]{beamer}"
;; ()
;; ))
    #+END_SRC


* Completion
  Settings for Completion
  
  #+begin_src emacs-lisp :tangle yes
;; ;; Auto completion settings
;; ;;
;; ;;(require 'auto-complete-auctex)
; Jedi
 (add-hook 'python-mode-hook 'jedi:setup)
 (setq jedi:complete-on-dot t)                 ; optional
;; Company
(add-hook 'after-init-hook 'global-company-mode) 

;(company-auctex-init)
(setq company-idle-delay 0
      company-echo-delay 0
      company-dabbrev-downcase nil
      company-minimum-prefix-length 2
      company-selection-wrap-around t
      company-transformers '(company-sort-by-occurrence
                             company-sort-by-backend-importance))
(company-quickhelp-mode 1)
  #+end_src

  #+RESULTS:
  : t
  
* LaTeX
#+begin_src emacs-lisp :tangle yes
;; Set XeTex as default engine
(add-hook 'latex-mode-hook (lambda ()
			     TeX-engine-set 'XeTeX))


;;This is mainly for making beamer frames appear in the reftex tox
(setq reftex-section-levels '(("part" . 0)
                  ("chapter" . 1)
                  ("section" . 2)
                  ("subsection" . 3)
                  ("subsubsection" . 4)
                  ("paragraph" . 5)
                  ("subparagraph" . 6)
                  ("frametitle" . 7)
                  ("addchap" . -1)
                  ("addsec" . -2)))

(setq TeX-fold-mode t)
;(add-to-list 'TeX-view-program-selection
;             '(output-pdf "Zathura"))


;(add-to-list
; 'TeX-command-list
; '("Asymptote"
;   "asy %d-[0-9].asy"
;   TeX-run-command
;   nil
;   t
;   :help "Compile all the asy files generated by the LaTeX compile run"
;   )
; )

#+end_src

#+RESULTS:
| LatexMk       | latexmk %(-PDF)%S%(mode) %(file-line-error) %t                         | TeX-run-latexmk             | nil | (plain-tex-mode latex-mode doctex-mode)    | :help | Run LatexMk                                                  |          |                   |
| Asymptote     | asy %d-[0-9].asy                                                       | TeX-run-command             | nil | t                                          | :help | Compile all the asy files generated by the LaTeX compile run |          |                   |
| LatexMk       | latexmk %(-PDF)%S%(mode) %(file-line-error) %t                         | TeX-run-latexmk             | nil | (plain-tex-mode latex-mode doctex-mode)    | :help | Run LatexMk                                                  |          |                   |
| TeX           | %(PDF)%(tex) %(file-line-error) %(extraopts) %`%S%(PDFout)%(mode)%' %t | TeX-run-TeX                 | nil | (plain-tex-mode ams-tex-mode texinfo-mode) | :help | Run plain TeX                                                |          |                   |
| LaTeX         | %`%l%(mode)%' %t                                                       | TeX-run-TeX                 | nil | (latex-mode doctex-mode)                   | :help | Run LaTeX                                                    |          |                   |
| Makeinfo      | makeinfo %(extraopts) %t                                               | TeX-run-compile             | nil | (texinfo-mode)                             | :help | Run Makeinfo with Info output                                |          |                   |
| Makeinfo HTML | makeinfo %(extraopts) --html %t                                        | TeX-run-compile             | nil | (texinfo-mode)                             | :help | Run Makeinfo with HTML output                                |          |                   |
| AmSTeX        | amstex %(PDFout) %(extraopts) %`%S%(mode)%' %t                         | TeX-run-TeX                 | nil | (ams-tex-mode)                             | :help | Run AMSTeX                                                   |          |                   |
| ConTeXt       | %(cntxcom) --once --texutil %(extraopts) %(execopts)%t                 | TeX-run-TeX                 | nil | (context-mode)                             | :help | Run ConTeXt once                                             |          |                   |
| ConTeXt Full  | %(cntxcom) %(extraopts) %(execopts)%t                                  | TeX-run-TeX                 | nil | (context-mode)                             | :help | Run ConTeXt until completion                                 |          |                   |
| BibTeX        | bibtex %s                                                              | TeX-run-BibTeX              | nil | t                                          | :help | Run BibTeX                                                   |          |                   |
| Biber         | biber %s                                                               | TeX-run-Biber               | nil | t                                          | :help | Run Biber                                                    |          |                   |
| View          | %V                                                                     | TeX-run-discard-or-function | t   | t                                          | :help | Run Viewer                                                   |          |                   |
| Print         | %p                                                                     | TeX-run-command             | t   | t                                          | :help | Print the file                                               |          |                   |
| Queue         | %q                                                                     | TeX-run-background          | nil | t                                          | :help | View the printer queue                                       | :visible | TeX-queue-command |
| File          | %(o?)dvips %d -o %f                                                    | TeX-run-dvips               | t   | t                                          | :help | Generate PostScript file                                     |          |                   |
| Dvips         | %(o?)dvips %d -o %f                                                    | TeX-run-dvips               | nil | t                                          | :help | Convert DVI file to PostScript                               |          |                   |
| Dvipdfmx      | dvipdfmx %d                                                            | TeX-run-dvipdfmx            | nil | t                                          | :help | Convert DVI file to PDF with dvipdfmx                        |          |                   |
| Ps2pdf        | ps2pdf %f                                                              | TeX-run-ps2pdf              | nil | t                                          | :help | Convert PostScript file to PDF                               |          |                   |
| Index         | makeindex %s                                                           | TeX-run-index               | nil | t                                          | :help | Run makeindex to create index file                           |          |                   |
| Xindy         | texindy %s                                                             | TeX-run-command             | nil | t                                          | :help | Run xindy to create index file                               |          |                   |
| Check         | lacheck %s                                                             | TeX-run-compile             | nil | (latex-mode)                               | :help | Check LaTeX file for correctness                             |          |                   |
| ChkTeX        | chktex -v6 %s                                                          | TeX-run-compile             | nil | (latex-mode)                               | :help | Check LaTeX file for common mistakes                         |          |                   |
| Spell         | (TeX-ispell-document "")                                               | TeX-run-function            | nil | t                                          | :help | Spell-check the document                                     |          |                   |
| Clean         | TeX-clean                                                              | TeX-run-function            | nil | t                                          | :help | Delete generated intermediate files                          |          |                   |
| Clean All     | (TeX-clean t)                                                          | TeX-run-function            | nil | t                                          | :help | Delete generated intermediate and output files               |          |                   |
| Other         |                                                                        | TeX-run-command             | t   | t                                          | :help | Run an arbitrary command                                     |          |                   |

** Ebib settings
   #+BEGIN_SRC elisp :tangle yes
(setq ebib-bibtex-dialect 'biblatex)


;(setq ebib-search-)
   #+END_SRC

   #+RESULTS:
   : biblatex

** TODO Elisp function to add resources to Bibliography <2016-03-25 Fri> 
HelmBib should be incorporated in the process 
** TODO AucTeX shortcuts for changes package 
For fast collaborative LaTeX editing
** TODO Glossaryfile browser based on helm
   :LOGBOOK:
   CLOCK: [2016-04-07 Thu 11:10]--[2016-04-07 Thu 11:45] =>  0:35
   :END:
#+BEGIN_SRC elisp tangle: no


#+END_SRC
* Helm
  Settings for Helm usage
  #+begin_src emacs-lisp :tangle yes
(custom-set-variables
 '(ebib-bib-search-dirs (quote ("" "~/Books/")))
'(helm-autoresize-mode t)
 '(helm-bibtex-fallback-options
   (quote
    (("Web of Science" . "http://apps.webofknowledge.com/UA_GeneralSearch_input.do?product=UA&search_mode=GeneralSearch&SID=W215oyisE87u2y7A5lr&preferencesSaved=")
     ("Google Scholar" . "https://scholar.google.co.uk/scholar?q=%s")
     ("Pubmed" . "https://www.ncbi.nlm.nih.gov/pubmed/?term=%s")
     ("arXiv" . biblio-arxiv-lookup)
     ("Hal" . biblio-hal-lookup)
     ("CrossRef" . biblio-crossref-lookup)
     ("DBLP" . biblio-dblp-lookup)
     ("Bodleian Library" . "http://solo.bodleian.ox.ac.uk/primo_library/libweb/action/search.do?vl(freeText0)=%s&fn=search&tab=all")
     ("Library of Congress" . "https://www.loc.gov/search/?q=%s&all=true&st=list")
     ("Deutsche Nationalbibliothek" . "https://portal.dnb.de/opac.htm?query=%s")
     ("British National Library" . "http://explore.bl.uk/primo_library/libweb/action/search.do?&vl(freeText0)=%s&fn=search")
     ("Bibliothteque nationale de France" . "http://catalogue.bnf.fr/servlet/RechercheEquation?host=catalogue?historique1=Recherche+par+mots+de+la+notice&niveau1=1&url1=/jsp/recherchemots_simple.jsp?host=catalogue&maxNiveau=1&categorieRecherche=RechercheMotsSimple&NomPageJSP=/jsp/recherchemots_simple.jsp?host=catalogue&RechercheMotsSimpleAsauvegarder=0&ecranRechercheMot=/jsp/recherchemots_simple.jsp&resultatsParPage=20&x=40&y=22&nbElementsHDJ=6&nbElementsRDJ=7&nbElementsRCL=12&FondsNumerise=M&CollectionHautdejardin=TVXZROM&HDJ_DAV=R&HDJ_D2=V&HDJ_D1=T&HDJ_D3=X&HDJ_D4=Z&HDJ_SRB=O&CollectionRezdejardin=UWY1SPQM&RDJ_DAV=S&RDJ_D2=W&RDJ_D1=U&RDJ_D3=Y&RDJ_D4=1&RDJ_SRB=P&RDJ_RLR=Q&RICHELIEU_AUTRE=ABCDEEGIKLJ&RCL_D1=A&RCL_D2=K&RCL_D3=D&RCL_D4=E&RCL_D5=E&RCL_D6=C&RCL_D7=B&RCL_D8=J&RCL_D9=G&RCL_D10=I&RCL_D11=L&ARSENAL=H&LivrePeriodique=IP&partitions=C&images_fixes=F&son=S&images_animees=N&Disquette_cederoms=E&multimedia=M&cartes_plans=D&manuscrits=BT&monnaies_medailles_objets=JO&salle_spectacle=V&Monographie_TN=M&Periodique_TN=S&Recueil_TN=R&CollectionEditorial_TN=C&Ensemble_TN=E&Spectacle_TN=A&NoticeB=%s")
     ("EZB" . "http://rzblx1.uni-regensburg.de/ezeit/search.phtml?bibid=EFF&colors=2&lang=de"))))
 '(helm-dash-browser-func (quote eww))
 '(helm-el-package-initial-filter (quote all))
 '(helm-mode t)
 '(helm-mode-fuzzy-match t) )
  
  ;; ;; No asking for typing complete "yes" or "no"
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq confirm-nonexistent-file-or-buffer nil)
  (tooltip-mode -1)
  (setq tooltip-use-echo-area t)
  ;; ;; Switch of beep sound
  (setq visible-bell t)
  ;; ;; Global shortcuts
  (global-set-key "\C-cd" 'dictcc)
  (global-set-key "\M-x" 'helm-M-x)
  (global-set-key "\C-x\C-f" 'helm-find-files)
  (global-set-key "\C-x\C-b" 'helm-buffers-list)
  (global-set-key "\M-y" 'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "M-s") ' helm-occur-from-isearch)
  (global-set-key (kbd "<f9>") ' helm-bibtex)
  (global-set-key (kbd "C-h a") 'helm-apropos)
  (global-set-key (kbd "C-c -") 'helm-calcul-expression)
  ;; ;; Visual effects for more intuitive navigation
  (add-hook 'after-init-hook (lambda ()
  (when (fboundp 'auto-dim-other-buffers-mode)
  (auto-dim-other-buffers-mode t))))
  ;; ;; Helm settings
  ;;(helm-autoresize-mode t)
  (setq helm-bibtex-bibliography '("/home/aaron/Books/Library.bib" "/home/aaron/Documents/Publications/publications.bib"))
  (setq helm-bibtex-library-path '(
  "/home/aaron/Dropbox/polyamides/Bachelor_Thesis_Aaron/Literature/"
  "/home/aaron/Books/" 
  "/home/aaron/Dropbox/polyamides/Literature/" 
  "/home/aaron/.dropbox-alt/Dropbox/Macromolecular characterization Group/Theses/"
  ))
(setq helm-bibtex-full-frame nil)
;(setq helm-bibtex-notes-path '("/home/aaron/Publishing/Bachelor_Thesis/Literature/Notes/"))
(autoload 'helm-bibtex "helm-bibtex" "" t)

 (setq helm-ff-auto-update-initial-value t)
(setq helm-bibtex-pdf-field "File")
(setq helm-split-window-in-side-p           t ; open helm uffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)
(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t
      helm-M-x-fuzzy-match t)
      



(setq helm-apropos-fuzzy-match t)



(helm-mode)
  #+end_src

  #+RESULTS:
  : t

* Mail
  Settings for mail integration, mainly mu4e

  #+begin_src emacs-lisp :tangle yes 
;; Mu4e settings
(mu4e-maildirs-extension)
;(add-to-list 'load-path "~/.emacs.d/lisp/mu4e-multi")  ;; if it's not already in `load-path'
;(require 'mu4e-multi)
;;(mu4e-maildirs-extension)
;; these are actually the defaults
 (setq
   mu4e-maildir       "~/Mail")   ;; top-level Maildir)
;;   mu4e-sent-folder   "/Sent"       ;; folder for sent messages
;;   mu4e-drafts-folder "/Drafts"     ;; unfinished messages
;;   mu4e-trash-folder  "/Trash"      ;; trashed messages
;;   mu4e-refile-folder "/archive")   ;; saved messages
(defvar my-mu4e-account-alist
  '(
    ("HSF"
     (user-mail-address  "rebmann.aaron@stud.hs-fresenius.de")
     (mu4e-sent-folder   "/HSF/Gesendet")
     (mu4e-drafts-folder "/HSF/Entwuerfe")
     (mu4e-trash-folder  "/HSF/Geloescht")
     (mu4e-refile-folder "/HSF/Archive")

   )
   
  ("Gmail"
    (user-mail-address  "aaronrebmann@gmail.com")
     (mu4e-sent-folder   "/Gmail/Sent")
     (mu4e-drafts-folder "/Gmail/Drafts")
     (mu4e-trash-folder  "/Gmail/Trash")
     (mu4e-refile-folder "/Gmail/Archive")

     )



     
  ("Yahoo"
    (user-mail-address  "disagreewithyourattitude@yahoo.de")
     (mu4e-sent-folder   "/Yahoo/Sent")
     (mu4e-drafts-folder "/Yahoo/Drafts")
     (mu4e-trash-folder  "/Yahoo/Trash")
     (mu4e-refile-folder "/Yahoo/Archive")

     )
  )
  ) 
(setq mu4e-user-mail-address-list
     (mapcar (lambda (account) (cadr (assq 'user-mail-address account)))
            my-mu4e-account-alist))
(defun my-mu4e-set-account ()
  "Set the account for composing a message."
  (let* ((account
          (if mu4e-compose-parent-message
              (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                (string-match "/\\(.*?\\)/" maildir)
                (match-string 1 maildir))
            (completing-read (format "Compose with account: (%s) "
                                     (mapconcat #'(lambda (var) (car var))
                                                my-mu4e-account-alist "/"))
                             (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                             nil t nil nil (caar my-mu4e-account-alist))))
         (account-vars (cdr (assoc account my-mu4e-account-alist))))
    (if account-vars
        (mapc #'(lambda (var)
                  (set (car var) (cadr var)))
              account-vars)
      (error "No email account found"))))

;;ask for account when composing mail
(add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "offlineimap")
;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)
;; set update interval (testing, there will be trouble with the credentials)
(setq mu4e-update-interval 3)

;; HTML rendering settings
(setq mu4e-html2text-command "html2text")
(setq mu4e-view-prefer-html t)
;; attachments go here
(setq mu4e-attachment-dir "~/Downloads")
;; when you reply to a message, use the identity that the mail was sent to
;; the cpbotha variation ...unknownsymbols... function that checks to, cc and bcc fields
(defun cpb-mu4e-is-message-to (msg rx)
"Check if to, cc or bcc field in MSG has any address in RX."
(or (mu4e-message-contact-field-matches msg :to rx)
(mu4e-message-contact-field-matches msg :cc rx)
(mu4e-message-contact-field-matches msg :bcc rx)))
;; mu4e-multi settings
;;; Replies
(setq message-citation-line-function 'message-insert-formatted-citation-line) 
(setq message-citation-line-format "On %a, %b %d %Y, %f wrote:\n")
(global-set-key (kbd "C-x m") 'mu4e)
(setq smtpmail-multi-accounts
      (quote
       ((HSF . ("rebmann.aaron@stud.hs-fresenius.de"
                 "mail.hs-fresenius.de"
                 587
		 nil
                 nil nil nil nil))
        (Gmail . ("aaronrebmann@gmail.com"
		  "smtp.gmail.com"
                   587
                   nil
                   starttls
                   nil nil nil))

	
       )
      ))

(setq smtpmail-multi-associations
      (quote
       (("aaronrebmann@gmail.com" Gmail)

        ("rebmann.aaron@stud.hs-fresenius.de" HSF))))

(setq smtpmail-multi-default-account (quote gmail))

(setq message-send-mail-function 'smtpmail-multi-send-it)

(setq smtpmail-debug-info t)
(setq smtpmail-debug-verbose t)


;; Custom functions
(add-to-list 'mu4e-header-info-custom
       '(:recipnum .
         ( :name "Number of recipients"  ;; long name, as seen in the message-view
           :shortname "Recip#"           ;; short name, as seen in the headers view
           :help "Number of recipients for this message" ;; tooltip
           :function
           (lambda (msg)
     	(format "%d"
     	  (+ (length (mu4e-message-field msg :to))
     	    (length (mu4e-message-field msg :cc))))))))
     (add-to-list 'mu4e-headers-custom-markers
       '("More than n recipients"
           (lambda (msg n)
             (> (+ (length (mu4e-message-field msg :to))
                   (length (mu4e-message-field msg :cc))) n))
           (lambda ()
             (read-number "Match messages with more recipients than: "))) t)
;; enable inline images
     (setq mu4e-view-show-images t)
     ;; use imagemagick, if available
     (when (fboundp 'imagemagick-register-types)
        (imagemagick-register-types))
;; prevent <openwith> from interfering with mail attachments
(require 'mm-util)
(add-to-list 'mm-inhibit-file-name-handlers 'openwith-file-handler)
;(require 'org-mu4e)
  #+end_src

  #+RESULTS:
  | openwith-file-handler | jka-compr-handler | image-file-handler | epa-file-handler |

** Mu4e bookmarks
   #+begin_src emacs-lisp :tangle  yes
;; Bookmarks
 (add-to-list 'mu4e-bookmarks
	      '("size:5M..500M"       "Big messages"     ?b)

	      )

(add-to-list 'mu4e-bookmarks
	     '("maildir:/HSF/INBOX"    "HSF"    ?1)
	     )


(add-to-list 'mu4e-bookmarks
	     '("maildir:/Gmail/INBOX"    "Gmail"    ?g)
	     )

(add-to-list 'mu4e-bookmarks
	     '("maildir:/HSF/INBOX Patrice"    "WSU-Project"    ?2)
	     )
(add-to-list 'mu4e-bookmarks
	     '("date:1d..now maildir:/HSF/INBOX maildir:/Gmail/INBOX"    "Yesterday until today"    ?y)
	     )


   #+end_src

   #+RESULTS:
   | date:now maildir:/HSF/INBOX maildir:/Gmail/INBOX     | Today's messages      | 116 |
   | date:1d..now maildir:/HSF/INBOX maildir:/Gmail/INBOX | Yesterday until today | 121 |
   | maildir:/HSF/INBOX Patrice                           | WSU-Project           |  50 |
   | maildir:/Gmail/INBOX                                 | Gmail                 | 103 |
   | maildir:/HSF/INBOX                                   | HSF                   |  49 |
   | size:5M..500M                                        | Big messages          |  98 |
   | flag:unread AND NOT flag:trashed                     | Unread messages       | 117 |
   | date:today..now                                      | Today's messages      | 116 |
   | date:7d..now                                         | Last 7 days           | 119 |
   | mime:image/*                                         | Messages with images  | 112 |
   
** TODO Mu4e capturing with Org
#+begin_src emacs-lisp :tangle no
(setq from
   (let ((first (car (mu4e-message-field-at-point :from))))
     (if (car first)
       (format "%s <%s>" (car first) (cdr first))
       (cdr first))))
(defun org-mu4e-store-link ()
"Store a link to a mu4e query or message."
(cond
 ;; storing links to queries
 ((eq major-mode 'mu4e-headers-mode)
  (let* ((query (mu4e-last-query))
      desc link)
(org-store-link-props :type "mu4e" :query query)
(setq
  desc (concat "mu4e:query:" query)
  link desc)
(org-add-link-props :link link :description desc)
link))
  ;; storing links to messages
((eq major-mode 'mu4e-view-mode)
  (let* ((msg  (mu4e-message-at-point))
     (msgid   (or (plist-get msg :message-id) "<none>"))
     (from (car (car (mu4e-message-field msg :from))))
     (to (car (car (mu4e-message-field msg :to))))
     (subject (mu4e-message-field msg :subject))
     link)
   (setq link (concat "mu4e:msgid:" msgid))
   (org-store-link-props :type "mu4e" :link link
             :message-id msgid)
   (setq link (concat "mu4e:msgid:" msgid))
   (org-store-link-props 
    :type "mu4e" :from from :to to :subject subject
          :message-id msgid)

   (org-add-link-props :link link
           :description (funcall org-mu4e-link-desc-func msg))
   link))))

(org-add-link-type "mu4e" 'org-mu4e-open)
(add-hook 'org-store-link-functions 'org-mu4e-store-link)
#+end_src

#+RESULTS:
| org-rmail-store-link | org-mhe-store-link | org-irc-store-link | org-info-store-link | org-gnus-store-link | org-docview-store-link | org-bibtex-store-link | org-bbdb-store-link | org-w3m-store-link | org-mu4e-store-link |
** TODO Mu4e alert <2016-04-05 Tue>
   :LOGBOOK:
   CLOCK: [2016-04-07 Thu 13:15]--[2016-04-07 Thu 13:17] =>  0:02
   :END:
#+BEGIN_SRC emacs-lisp :tangle no
(setq mu4e-alert-interesting-mail-query
      (concat
       "flag:unread"
       " AND NOT flag:trashed"
       " AND NOT maildir: Gmail"
       ))
;(mu4e-alert-set-default-style 'notifications)
(add-hook 'after-init-hook #'mu4e-alert-enable-notifications)


#+END_SRC

#+RESULTS:
| #[0 \305\211\235\203 \306"\301\307!\210\210        \205(  |
|                                                                       |

* Dired
  Settings for Dired
  #+begin_src emacs-lisp :tangle yes
  (add-hook 'dired-mode-hook
 (lambda ()
  (define-key dired-mode-map (kbd "C-<up>")
    (lambda () (interactive) (find-alternate-file "..")))
  ; was dired-up-directory
 ))




(add-hook 'dired-mode-hook
	  (lambda ()
	    (define-key dired-mode-map (kbd "C-s")
	      (lambda () (interactive) (dired-narrow-fuzzy))
	      )
	    )
	  )



(eval-after-load "dired-aux"
   '(add-to-list 'dired-compress-file-suffixes 
                 '("\\.zip\\'" ".zip" "unzip")))

(diredp-toggle-find-file-reuse-dir 1)

  #+end_src

  #+RESULTS:
  : Reusing Dired buffers is now ON

* Yasnippet
  Yasnippet settings
  #+begin_src emacs-lisp :tangle yes
  ;(add-hook 'prog-mode-hook #'yas-minor-mode)
  ;; (yas-snippet-dirs
  ;; ("/home/aaron/.emacs.d/elpa/elpy-20160131.118/snippets/"
  ;;  "/home/aaron/.emacs.d/elpa/django-snippets-20131229.811/snippets")) 
  (yas-global-mode 1)
  #+end_src

  #+RESULTS:
  : t

* Browsing
#+begin_src emacs-lisp :tangle yes
(setq elfeed-feeds '(
"http://blog.revolutionanalytics.com/atom.xml"
        "http://www.terminally-incoherent.com/blog/feed/"
	"http://www.offlineimap.org/feed.xml"
	"http://www.alexbelger.com/feed/"
	"http://planet.emacsen.org/atom.xml"
	"http://emacs-fu.blogspot.com/feeds/posts/default/-/new"
	"https://github.com/blog.atom"
	"http://mytrxworkouts.net/feed/"
	"http://emacsrocks.com/atom.xml"
	"http://lebensverrueckt.haktar.org/feed.xml"
	"https://www.bruker.com/rss.xml"
	"http://dragly.org/feed/"
	"http://texblog.net/feed/"
	"http://emacsworld.blogspot.com/feeds/posts/default"
	"http://pbelmans.wordpress.com/category/latex/feed"
	"http://texhacks.blogspot.com/feeds/posts/default"
	"http://pit-claudel.fr/clement/blog/feed"
	"http://chrisalbon.com/feeds/all.rss.xml"
	"http://www.metal-hammer.de/feed/"
	"http://feeds.feedburner.com/TheKitchinResearchGroup"
))
(setq-default elfeed-search-filter "@1-week-ago +unread ")
;(setq browse-url-browser-function 'conkeror)
#+end_src

#+RESULTS:
: @1-week-ago +unread 

* Navigation

** Window switching
   #+begin_src emacs-lisp :tangle yes
   (win-switch-setup-keys-ijkl "\C-xo")
   (setq win-switch-idle-time 2)
   #+end_src

  #+RESULTS:
  : 2

* Dotemacs hook
  A hooked function that tangles and compiles the init.org after saving.
  #+begin_src emacs-lisp :tangle yes
  (defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
  (expand-file-name (concat user-emacs-directory "init.org")))
  ;; Avoid running hooks when tangling.
  (let ((prog-mode-hook nil))
  (org-babel-tangle))))
;  (byte-compile-file (concat user-emacs-directory "init.el")



  (add-hook 'after-save-hook 'tangle-init)
  (set-language-environment "UTF-8")
  #+end_src

  #+RESULTS:
  : t






  
* Modes
  #+begin_src emacs-lisp :tangle yes
(dolist

    (mode
     '(projectile-global-mode
       recentf-mode
       global-company-mode
       golden-ratio-mode
       rainbow-mode
       )
     )
  )
(ace-link-setup-default)
  #+end_src

  #+RESULTS:
  : ace-link-custom
* Filesystem behavior
  #+begin_src emacs-lisp :tangle yes
  (defvar emacs-autosave-directory
  (concat user-emacs-directory "autosaves/")
  "This variable dictates where to put auto saves. It is set to a
  directory called autosaves located wherever your .emacs.d/ is
  located.")

;; Sets all files to be backed up and auto saved in a single directory.
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))




  #+end_src

  #+RESULTS:
  | .* | ~/.emacs.d/autosaves/ | t |

* Temporary place for all the stuff from the init that comes after the specific stuff
  #+begin_src emacs-lisp :tangle yes
;(toggle-diredp-find-file-reuse-dir 1)




;; Experimental approach to always reuse dired buffers
;(add-hook 'dired-mode-hook
;	  #'diredp-up-directory-reuse-dir-buffer)







;; ;;LaTeX settings
(setq TeX-show-compilation nil)
;(add-hook 'LaTeX-mode-hook #'latex-extra-mode)
(add-hook 'LaTeX-mode-hook 'reftex-mode)
(company-auctex-init)
(setq TeX-auto-save t)
     (setq TeX-parse-self t)
     (setq-default TeX-master nil)


;; Flycheck settings
(add-hook 'after-init-hook #'global-flycheck-mode)


;(desktop-save-mode 1)

(menu-bar-mode -1)
(tool-bar-mode -1)
;; Who use the bar to scroll?
(scroll-bar-mode 0)


;; Python settings

;; (autoload 'python-mode "python-mode" "Python Mode." t)
;; (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
;; (add-to-list 'interpreter-mode-alist '("python" . python-mode))



;(smartparens-mode t)
;; Activate global modes that I like for convenience after everything else is loaded
;; These should probably be wrapped into hooks

(elpy-enable)
(elpy-use-ipython)

(projectile-global-mode)
(achievements-mode)
;(server-start)
;;PDF tools 

(pdf-tools-install)
(require 'openwith)
(openwith-mode t)
(setq openwith-associations '(("\\.pdf\\'" "zathura" (file))))
  #+end_src

  #+RESULTS:
  | \.pdf\' | zathura | (file) |
* Keybindings
#+begin_src emacs-lisp :tangle yes

(undo-tree-mode)
(global-unset-key "\C-xu")
(global-set-key "\C-xu" 'undo)
(global-set-key [f12] 'undo-tree-visualize)
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)
(global-set-key "\C-hb" 'helm-descbinds)
(global-set-key [f4] 'call-last-kbd-macro)
(global-set-key [f5] 'helm-execute-kmacro)
(global-set-key (kbd "C-x o") 'switch-window)
;; Leave parentheses that have been inserted by smartparens
(global-set-key (kbd "C-+") 'sp-up-sexp)
(setq next-line-add-newlines t)
#+end_src

#+RESULTS:
: t

* Haskell
#+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'haskell-mode-hook
               (lambda ()
                 (set (make-local-variable 'company-backends)
                      (append '((company-capf company-dabbrev-code))
                              company-backends))))

(setq haskell-tags-on-save nil)
(setq haskell-compile-command "ghc -package parsec  %s")
     (eval-after-load "haskell-mode"
         '(define-key haskell-mode-map (kbd "C-c C-c") 'haskell-compile))

#+END_SRC

#+RESULTS:
* Smartparens
#+BEGIN_SRC emacs-lisp :tangle yes

(smartparens-global-mode)
(show-smartparens-global-mode t)
(global-set-key (kbd "C-c s p") 'sp-splice-sexp)
(sp-local-pair 'latex-mode "$" "$");; Latex inline math
(sp-local-pair 'latex-mode "\\left(" "\\right)")
(sp-local-pair 'latex-mode "\\left[" "\\right]")
(defun parentex ()
  "In latex mode, prompt for input and insert leftright (self adjusting) parentheses"
  (interactive)
  


  )
(sp-local-pair 'latex-mode "\\left(" "\\right)" :insert "C-b l" :trigger "\\l(") 
(sp-local-pair 'eshell "#<" ">" :trigger "#<" )
#+END_SRC
#+RESULTS:
| eshell     | (:open #< :close > :trigger #< :actions (wrap insert autoskip navigate) :when (:add) :unless (:add) :pre-handlers (:add) :post-handlers (:add)) |                                                                                                                                                            |                                                                                                                                    |                                                               |                                                             |                                                             |                                                             |                                                             |                                                             |                                                             |
| latex-mode | (:open \left[ :close \right] :actions (wrap insert autoskip navigate) :when (:add) :unless (:add) :pre-handlers (:add) :post-handlers (:add))   | (:open \left( :close \right) :actions (wrap insert autoskip navigate) :when (:add) :unless (:add) :pre-handlers (:add) :post-handlers (:add) :trigger \l() | (:open $ :close $ :actions (wrap insert autoskip navigate) :when (:add) :unless (:add) :pre-handlers (:add) :post-handlers (:add)) |                                                               |                                                             |                                                             |                                                             |                                                             |                                                             |                                                             |
| t          | (:open \\( :close \\) :actions (insert wrap autoskip navigate))                                                                                 | (:open \{ :close \} :actions (insert wrap autoskip navigate))                                                                                              | (:open \( :close \) :actions (insert wrap autoskip navigate))                                                                      | (:open \" :close \" :actions (insert wrap autoskip navigate)) | (:open " :close " :actions (insert wrap autoskip navigate)) | (:open ' :close ' :actions (insert wrap autoskip navigate)) | (:open ( :close ) :actions (insert wrap autoskip navigate)) | (:open [ :close ] :actions (insert wrap autoskip navigate)) | (:open { :close } :actions (insert wrap autoskip navigate)) | (:open ` :close ` :actions (insert wrap autoskip navigate)) |
* External software
#+BEGIN_SRC emacs-lisp :tangle yes

#+END_SRC
* SLIME
#+BEGIN_SRC emacs-lisp :tangle yes
(setq inferior-lisp-program "/usr/bin/sbcl")


#+END_SRC

#+RESULTS:
: slime-compile-defun
* CSV
#+BEGIN_SRC emacs-lisp :tangle yes
(add-hook 'csv-mode-hook (lambda () (font-lock-mode -1)(company-mode -1)))



#+END_SRC

#+RESULTS:
| lambda | nil | (font-lock-mode -1) | (company-mode -1) |

* Appearance
** Theme
  - [ ] Change highlight-tail mode to adapt to theme colors
   #+begin_src emacs-lisp :tangle yes

(add-to-list 'custom-theme-load-path "~/.emacs.d/lisp/moe-theme.el/")
					;  (load-theme 'leuven)
;(set-default-font "Monospace 14")
(setq show-paren-style 'expression)
(load-theme 'afternoon)
;(load-theme 'monokai)
;(load-theme 'ahungry)
;(load-theme 'jazz)
(setq highlight-tail-colors '(("#483d8b" . 0)
			      ("#483d8b" . 10)
			      ("#7b68ee" . 20)
			      ("#8470ff" . 30)
			      ("#Add8e6" . 40 )
			      ))


(highlight-tail-mode)
(highlight-tail-reload)
(beacon-mode)






   #+end_src

   #+RESULTS:
   : t



** Powerline
   #+BEGIN_SRC emacs-lisp :tangle yes
;  (add-to-list 'load-path "~/.emacs.d/lisp/powerline")
 ; (require 'powerline)
; (powerline-default-theme)
(setq sml/theme 'respectful)
(setq sml/shorten-directory t)
(setq sml/shorten-modes t)
(smart-mode-line-enable)
(sml/setup)
;;  (powerline-alternate-right)

  ;; (add-to-list 'calendar-mode-line-format
  ;;              '(let ((day (nth 1 date))
  ;;                     (month (nth 0 date))
  ;;                     (year (nth 2 date)))
  ;;                 (format-time-string "Week of year: %V"
  ;;                                     (encode-time 1 1 1 day month year))))

  ;; Diminish modeline clutter
  ;(require 'diminish)
  ;(diminish 'wrap-region-mode)
  ;(diminish 'yas-minor-mode)

   #+END_SRC

   #+RESULTS:
   : t


* Custom functions
Handy little hacks that are just not big enough for a library.
#+BEGIN_SRC emacs-lisp :tangle yes
(defun date-today()
  "Insert todays date yyyy-mm-dd"
  (interactive)
 (insert (format-time-string "%Y-%m-%d")))



#+END_SRC

#+RESULTS:
: date-today










































